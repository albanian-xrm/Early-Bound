using AlbanianXrm.EarlyBound.Helpers;
using System;
using System.ComponentModel;
using System.Drawing.Design;
using System.IO;

namespace AlbanianXrm.EarlyBound
{
    [Serializable]
    public class OrganizationOptions
    {
        internal static class Defaults
        {
            internal static string OutputFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile​), "Downloads/AlbanianEarlyBound");

            public const string EntityTypesFolder = "Entities";
            public const string MessageTypesFolder = "Messages";
            public const string OptionsetTypesFolder = "OptionSets";
        }

      
        public OrganizationOptions() { }

        [DisplayName("Organization")]
        [Description("Current organization")]
        [ReadOnly(true)]
        public string Key { get; set; }

        [Category("General")]
        [DisplayName("Suppress GeneratedCode Attribute")]
        [Description("When set, this suppress all generated objects being tagged with the code generation engine and version")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool SuppressGeneratedCodeAttribute { get; set; }

        [Category("General")]
        [DisplayName("Language")]
        [Description("The language to use for the generated proxy code.  This can be either 'CS' or 'VB'.  The default language is 'CS'.")]
        [DefaultValue(Language.CS)]
        [TypeConverter(typeof(DescriptionEnumConverter))]
        public Language Language { get; set; }

        [Category("General")]
        [DisplayName("Namespace")]
        [Description("The namespace for the generated code.  The default namespace is the global namespace.")]
        public string Namespace { get; set; }

        [Category("General")]
        [DisplayName("Service Context")]
        [Description("The name for the generated service context. If a value is passed in, it will be used for the Service Context.  If not, no Service Context will be generated.")]
        public string ServiceContextName { get; set; }

        [Category("General")]
        [DisplayName("Generate Actions")]
        [Description("When set, Emits message classes as part of code generation.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool GenerateActions { get; set; }

        [Category("General")]
        [DisplayName("Emit Fields Classes")]
        [Description("Generate a constants structure that contains all of the field names by entity at the time of code generation.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool EmitFieldsClasses { get; set; }

        // entitynamesfilter will be autogenerated from the node selection 

        [Category("General")]
        [DisplayName("Message Names Filter")]
        [Description("Filters the list of messages that are retrieved when reading data from Dataverse. Passed in as a semicolon separated list, required messages ( Create, Update, Delete, Retrieve, RetrieveMultiple, Associate and DisAssociate) are always included. An * can be used to proceed or trail an message allowing for all messages starting with or ending with a string. Using the form <messagename>;<messagename>")]
        public string MessageNamesFilter { get; set; }

        private string _OutputDirectory;
        [Category("General")]
        [DisplayName("Output Directory")]
        [Description("Write Directory for entity, message and optionset files")]
        [Editor(typeof(FolderPathEditor), typeof(UITypeEditor))]
        public string OutputDirectory
        {
            get { return _OutputDirectory ?? Defaults.OutputFolder; }
            set { _OutputDirectory = string.IsNullOrEmpty(value) ? Defaults.OutputFolder : value; }
        }

        [Category("General")]
        [DisplayName("Entity Types Folder")]
        [DefaultValue(Defaults.EntityTypesFolder)]
        [Description("Folder name that will contain entities. Default is Entities")]
        public string EntityTypesFolder { get; set; }

        [Category("General")]
        [DisplayName("Message Types Folder")]
        [DefaultValue(Defaults.MessageTypesFolder)]
        [Description("Folder name that will contain messages. Default is Messages")]
        public string MessageTypesFolder { get; set; }

        [Category("General")]
        [DisplayName("Optionset Types Folder")]
        [DefaultValue(Defaults.OptionsetTypesFolder)]
        [Description("Folder name that will contain messages. Default is OptionSets")]
        public string OptionsetTypesFolder { get; set; }

        //generateGlobalOptionSets

        [Category("General")]
        [DisplayName("Suppress INotify Pattern")]
        [Description("When enabled, does not write the INotify wrappers for properties and classes.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool SuppressINotifyPattern { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Remove ProxyTypesAssembly")]
        [Description("Remove ProxyTypesAssembly attribute from generated code.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool RemoveProxyTypesAssembly { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Remove Prefix")]
        [Description("Remove Publisher Prefix from Entities, Attributes and Optionsets.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool RemovePublisherPrefix { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Xml Documentation")]
        [Description("Generate Xml documentation from metadata description.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool GenerateXmlDocumentation { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Xml Workaround")]
        [Description("Apply a workaround to fix xml documentation escaping.")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool XmlDocumentationWorkaround { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Generate TwoOptions")]
        [Description("Generate Enumerations or Constants for TwoOptions attribute.")]          
        [DefaultValue(TwoOptions.NO)]
        [TypeConverter(typeof(DescriptionEnumConverter))]
        public TwoOptions TwoOptions { get; set; }

        [Category("AlbanianEarlyBound")]
        [DisplayName("Enum Properties")]
        [Description("Generate Enum Properties")]
        [DefaultValue(false)]
        [TypeConverter(typeof(YesNoConverter))]
        public bool OptionSetEnumProperties { get; set; }

        public override string ToString()
        {
            return Key;
        }
    }
}
