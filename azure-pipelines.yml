pool:
  vmImage: 'windows-2019'

name: $(SourceBranchName)+1.$(Date:yyyy.MM)$(Rev:.r)

variables:
  disable.coverage.autogenerate: 'true'

steps:
- script: echo Starting build pipeline!
  displayName: 'Hello from Albanian Xrm'

- powershell: |
    echo "##vso[task.setvariable variable=configuration;isOutput=true]$(IF($env:BRANCH -eq "refs/heads/main"){"Azure Pipelines"}else{"release"})"
    echo "##vso[task.setvariable variable=BuildNumber;isOutput=true]$(($env:BuildNumber).Substring(($env:BuildNumber).LastIndexOf('+')+1))"
  name: MyVars
  env: 
    BRANCH: $(Build.SourceBranch)
    BuildNumber: $(Build.BuildNumber)
  displayName: 'Set Configuration Variable'

- task: SonarCloudPrepare@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  inputs:
    SonarCloud: 'AlbanianXrm SonarCloud'
    organization: 'albanian-xrm'
    scannerMode: 'MSBuild'
    projectKey: 'albanian-xrm_Early-Bound'
    projectName: 'Early-Bound'

- task: NuGetCommand@2
  displayName: 'Restoring NuGet packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'

- task: DownloadSecureFile@1
  name: TestSignKey 
  inputs:
    secureFile: 'AlbanianXrm.Tests.snk'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Tests Secret'

- task: DownloadSecureFile@1
  name: SignKey 
  inputs:
    secureFile: 'AlbanianXrm.EarlyBound.snk'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Secret'

- task: DownloadSecureFile@1
  name: MyPlugin 
  inputs:
    secureFile: 'SecretKeeper.cs'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Syncfusion Secret'

- powershell: echo "##vso[task.setvariable variable=Path;isOutput=true]$((get-item $env:SECURE_FILE).Directory.FullName)"
  name: secretFolder
  env:
    Secure_File: $(TestSignKey.secureFilePath)
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Secret folder'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: 'AlbanianXrm.Tests.snk' 
    targetFolder: 'AlbanianXrm.CrmSvcUtilExtensions.Tests'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.CrmSvcUtilExtensions.Tests SignKey'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: 'AlbanianXrm.EarlyBound.snk' 
    targetFolder: 'AlbanianXrm.CrmSvcUtilExtensions'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.CrmSvcUtilExtensions SignKey'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(secretFolder.Path)
    contents: 'SecretKeeper.cs' 
    targetFolder: 'AlbanianXrm.EarlyBound'
    overWrite: true 
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  displayName: 'Overwrite AlbanianXrm.EarlyBound Syncfusion Secret'

- task: MSBuild@1
  inputs:
    solution: '**/*.sln'
    configuration: '$(MyVars.configuration)'
    msbuildArguments: '/p:Version=$(MyVars.BuildNumber)'
  displayName: 'Building Solution'

- task: VSTest@2
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*Tests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    testRunTitle: 'Unit Tests'
    platform: 'AnyCPU'
    configuration: $(MyVars.configuration)
  displayName: 'Running unit tests'

- task: MSBuild@1
  inputs:
    solution: 'AlbanianXrm.Coverage\AlbanianXrm.Coverage.csproj'
    configuration: Debug
    msbuildArguments: '/p:Version=$(MyVars.BuildNumber);AlbanianXrm-Coverage-Reports=Cobertura%3BHtmlInline_AzurePipelines%3BSonarQube'
  displayName: 'Testing & Coverage'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/AlbanianXrm.Coverage/**/CoverageReport/Cobertura.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/AlbanianXrm.Coverage/**/CoverageReport
  displayName: 'Publish Coverage'

- task: SonarCloudAnalyze@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  

- task: SonarCloudPublish@1
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')  
  inputs:
    pollingTimeoutSec: '300'

- task: NuGetCommand@2
  displayName: 'Creating NuGet package'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.nuspec'
    packDestination: '$(Build.ArtifactStagingDirectory)/NuGet'
    buildProperties: version=$(MyVars.BuildNumber);configuration=Release
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publishing NuGet package to pipeline'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)/NuGet'
    artifactName: 'NuGet Package'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- powershell: Compress-Archive -Path AlbanianXrm.EarlyBound\bin\Release\net462\XrmToolBox\Plugins\* -DestinationPath Plugins.zip
  displayName: 'Create zip for GitHub'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  

- task: PublishBuildArtifacts@1
  displayName: 'Publishing NuGet package to pipeline'
  inputs:
    pathtoPublish: 'Plugins.zip'
    artifactName: 'Plugin Package'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))  
    
    